// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: relation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	ApplyFriend(ctx context.Context, in *ApplyFriendReq, opts ...grpc.CallOption) (*ApplyFriendResp, error)
	UpdateApplyFriendStatus(ctx context.Context, in *UpdateApplyFriendStatusReq, opts ...grpc.CallOption) (*UpdateApplyFriendStatusResp, error)
	GetApplyFriendList(ctx context.Context, in *GetApplyFriendListReq, opts ...grpc.CallOption) (*GetApplyFriendListResp, error)
	GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error)
	DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error)
	GetBlackList(ctx context.Context, in *GetBlackListReq, opts ...grpc.CallOption) (*GetBlackListResp, error)
	DeleteBlack(ctx context.Context, in *DeleteBlackReq, opts ...grpc.CallOption) (*DeleteBlackResp, error)
	BlackUser(ctx context.Context, in *BlackUserReq, opts ...grpc.CallOption) (*BlackUserResp, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) ApplyFriend(ctx context.Context, in *ApplyFriendReq, opts ...grpc.CallOption) (*ApplyFriendResp, error) {
	out := new(ApplyFriendResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/ApplyFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) UpdateApplyFriendStatus(ctx context.Context, in *UpdateApplyFriendStatusReq, opts ...grpc.CallOption) (*UpdateApplyFriendStatusResp, error) {
	out := new(UpdateApplyFriendStatusResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/UpdateApplyFriendStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetApplyFriendList(ctx context.Context, in *GetApplyFriendListReq, opts ...grpc.CallOption) (*GetApplyFriendListResp, error) {
	out := new(GetApplyFriendListResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/GetApplyFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetFriendList(ctx context.Context, in *GetFriendListReq, opts ...grpc.CallOption) (*GetFriendListResp, error) {
	out := new(GetFriendListResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/GetFriendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) DeleteFriend(ctx context.Context, in *DeleteFriendReq, opts ...grpc.CallOption) (*DeleteFriendResp, error) {
	out := new(DeleteFriendResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/DeleteFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) GetBlackList(ctx context.Context, in *GetBlackListReq, opts ...grpc.CallOption) (*GetBlackListResp, error) {
	out := new(GetBlackListResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/GetBlackList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) DeleteBlack(ctx context.Context, in *DeleteBlackReq, opts ...grpc.CallOption) (*DeleteBlackResp, error) {
	out := new(DeleteBlackResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/DeleteBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) BlackUser(ctx context.Context, in *BlackUserReq, opts ...grpc.CallOption) (*BlackUserResp, error) {
	out := new(BlackUserResp)
	err := c.cc.Invoke(ctx, "/relation.relationService/BlackUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility
type RelationServiceServer interface {
	ApplyFriend(context.Context, *ApplyFriendReq) (*ApplyFriendResp, error)
	UpdateApplyFriendStatus(context.Context, *UpdateApplyFriendStatusReq) (*UpdateApplyFriendStatusResp, error)
	GetApplyFriendList(context.Context, *GetApplyFriendListReq) (*GetApplyFriendListResp, error)
	GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error)
	DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error)
	GetBlackList(context.Context, *GetBlackListReq) (*GetBlackListResp, error)
	DeleteBlack(context.Context, *DeleteBlackReq) (*DeleteBlackResp, error)
	BlackUser(context.Context, *BlackUserReq) (*BlackUserResp, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRelationServiceServer struct {
}

func (UnimplementedRelationServiceServer) ApplyFriend(context.Context, *ApplyFriendReq) (*ApplyFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFriend not implemented")
}
func (UnimplementedRelationServiceServer) UpdateApplyFriendStatus(context.Context, *UpdateApplyFriendStatusReq) (*UpdateApplyFriendStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplyFriendStatus not implemented")
}
func (UnimplementedRelationServiceServer) GetApplyFriendList(context.Context, *GetApplyFriendListReq) (*GetApplyFriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplyFriendList not implemented")
}
func (UnimplementedRelationServiceServer) GetFriendList(context.Context, *GetFriendListReq) (*GetFriendListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendList not implemented")
}
func (UnimplementedRelationServiceServer) DeleteFriend(context.Context, *DeleteFriendReq) (*DeleteFriendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriend not implemented")
}
func (UnimplementedRelationServiceServer) GetBlackList(context.Context, *GetBlackListReq) (*GetBlackListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlackList not implemented")
}
func (UnimplementedRelationServiceServer) DeleteBlack(context.Context, *DeleteBlackReq) (*DeleteBlackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlack not implemented")
}
func (UnimplementedRelationServiceServer) BlackUser(context.Context, *BlackUserReq) (*BlackUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlackUser not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_ApplyFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ApplyFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/ApplyFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ApplyFriend(ctx, req.(*ApplyFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_UpdateApplyFriendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplyFriendStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).UpdateApplyFriendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/UpdateApplyFriendStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).UpdateApplyFriendStatus(ctx, req.(*UpdateApplyFriendStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetApplyFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplyFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetApplyFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/GetApplyFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetApplyFriendList(ctx, req.(*GetApplyFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/GetFriendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetFriendList(ctx, req.(*GetFriendListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_DeleteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).DeleteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/DeleteFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).DeleteFriend(ctx, req.(*DeleteFriendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_GetBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlackListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).GetBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/GetBlackList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).GetBlackList(ctx, req.(*GetBlackListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_DeleteBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).DeleteBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/DeleteBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).DeleteBlack(ctx, req.(*DeleteBlackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_BlackUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlackUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).BlackUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.relationService/BlackUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).BlackUser(ctx, req.(*BlackUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation.relationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyFriend",
			Handler:    _RelationService_ApplyFriend_Handler,
		},
		{
			MethodName: "UpdateApplyFriendStatus",
			Handler:    _RelationService_UpdateApplyFriendStatus_Handler,
		},
		{
			MethodName: "GetApplyFriendList",
			Handler:    _RelationService_GetApplyFriendList_Handler,
		},
		{
			MethodName: "GetFriendList",
			Handler:    _RelationService_GetFriendList_Handler,
		},
		{
			MethodName: "DeleteFriend",
			Handler:    _RelationService_DeleteFriend_Handler,
		},
		{
			MethodName: "GetBlackList",
			Handler:    _RelationService_GetBlackList_Handler,
		},
		{
			MethodName: "DeleteBlack",
			Handler:    _RelationService_DeleteBlack_Handler,
		},
		{
			MethodName: "BlackUser",
			Handler:    _RelationService_BlackUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
