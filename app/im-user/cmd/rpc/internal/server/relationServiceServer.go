// Code generated by goctl. DO NOT EDIT!
// Source: relation.proto

package server

import (
	"context"

	"github.com/showurl/Path-IM-Server/app/im-user/cmd/rpc/internal/logic"
	"github.com/showurl/Path-IM-Server/app/im-user/cmd/rpc/internal/svc"
	"github.com/showurl/Path-IM-Server/app/im-user/cmd/rpc/pb"
)

type RelationServiceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedRelationServiceServer
}

func NewRelationServiceServer(svcCtx *svc.ServiceContext) *RelationServiceServer {
	return &RelationServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *RelationServiceServer) ApplyFriend(ctx context.Context, in *pb.ApplyFriendReq) (*pb.ApplyFriendResp, error) {
	l := logic.NewApplyFriendLogic(ctx, s.svcCtx)
	return l.ApplyFriend(in)
}

func (s *RelationServiceServer) UpdateApplyFriendStatus(ctx context.Context, in *pb.UpdateApplyFriendStatusReq) (*pb.UpdateApplyFriendStatusResp, error) {
	l := logic.NewUpdateApplyFriendStatusLogic(ctx, s.svcCtx)
	return l.UpdateApplyFriendStatus(in)
}

func (s *RelationServiceServer) GetApplyFriendList(ctx context.Context, in *pb.GetApplyFriendListReq) (*pb.GetApplyFriendListResp, error) {
	l := logic.NewGetApplyFriendListLogic(ctx, s.svcCtx)
	return l.GetApplyFriendList(in)
}

func (s *RelationServiceServer) GetFriendList(ctx context.Context, in *pb.GetFriendListReq) (*pb.GetFriendListResp, error) {
	l := logic.NewGetFriendListLogic(ctx, s.svcCtx)
	return l.GetFriendList(in)
}

func (s *RelationServiceServer) DeleteFriend(ctx context.Context, in *pb.DeleteFriendReq) (*pb.DeleteFriendResp, error) {
	l := logic.NewDeleteFriendLogic(ctx, s.svcCtx)
	return l.DeleteFriend(in)
}

func (s *RelationServiceServer) GetBlackList(ctx context.Context, in *pb.GetBlackListReq) (*pb.GetBlackListResp, error) {
	l := logic.NewGetBlackListLogic(ctx, s.svcCtx)
	return l.GetBlackList(in)
}

func (s *RelationServiceServer) DeleteBlack(ctx context.Context, in *pb.DeleteBlackReq) (*pb.DeleteBlackResp, error) {
	l := logic.NewDeleteBlackLogic(ctx, s.svcCtx)
	return l.DeleteBlack(in)
}

func (s *RelationServiceServer) BlackUser(ctx context.Context, in *pb.BlackUserReq) (*pb.BlackUserResp, error) {
	l := logic.NewBlackUserLogic(ctx, s.svcCtx)
	return l.BlackUser(in)
}
