syntax = "v1"

info(
	title: "im用户api 账户"
	desc: ""
	author: "showurl"
	email: "showurl@163.com"
	version: "v1.0"
)

// user ***************************************************************************************************************************

type UserModel struct {
	ID string `json:"id"`
	Username string `json:"username"`
	Nickname string `json:"nickname"`
	Sign string `json:"sign"`
	Avatar string `json:"avatar"`
	Province string `json:"province"`
	City string `json:"city"`
	District string `json:"district"`
	Birthday string `json:"birthday"`
	RegisterTime string `json:"registerTime"`
	IsMale bool `json:"isMale"`
}
type GetSelfInfoReq struct {

}
type GetSelfInfoResp struct {
	UserModel UserModel `json:"userModel"`
}
type GetUserByUsernameReq struct {
	Username string `from:"username"`
}
type GetUserByUsernameResp struct {
	UserModel UserModel `json:"userModel"`
}
type ModifySelfInfoReq struct {
	Nickname string `json:"nickname"`
	Sign string `json:"sign"`
	Avatar string `json:"avatar"`
	Province string `json:"province"`
	City string `json:"city"`
	District string `json:"district"`
	Birthday string `json:"birthday"`
	IsMale bool `json:"isMale"`
}
type ModifySelfInfoResp struct {
	ErrCode int `json:"errCode"`
	ErrMsg string `json:"errMsg"`
}

// relation ***************************************************************************************************************************
type RealtionUser {
	Id string `json:"id"`
	Nickname string `json:"nickname"`
	Sign string `json:"sign"`
	Avatar string `json:"avatar"`
	CreateTime string `json:"createTime"`
}
type ApplyFriendReq struct {
	UserId string `json:"userId"`
	Message string `json:"message"`
}
type ApplyFriendResp struct {
}

type AgreeFriendReq struct {
	ApplyId string `json:"applyId"`
}
type AgreeFriendResp struct {
}

type RefuseFriendReq struct {
	ApplyId string `json:"applyId"`
}
type RefuseFriendResp struct {
}

type GetFriendListReq {
}
type GetFriendListResp struct {
	FriendList []RealtionUser `json:"friendList"`
}
type GetFriendApplyListReq {
	PageNo int `from:"pageNo"`
	PageSize int `from:"pageSize"`
}
type GetFriendApplyItem {
	Id string `json:"id"`
	Nickname string `json:"nickname"`
	Sign string `json:"sign"`
	Avatar string `json:"avatar"`
	CreateTime string `json:"createTime"`
	Status int `json:"status"`
	StatusStr string `json:"statusStr"`
}
type GetFriendApplyListResp struct {
	ApplyList []GetFriendApplyItem `json:"applyList"`
}
type DeleteFriendReq {
	FriendId string `json:"friendId"`
}
type DeleteFriendResp struct {
}
type BlackUserReq {
	UserId string `json:"userId"`
}
type BlackUserResp {
}
type GetBlackListReq {
	PageNo int `from:"pageNo"`
	PageSize int `from:"pageSize"`
}
type GetBlackListResp struct {
	BlackList []RealtionUser `json:"blackList"`
}
type UnBlackUserReq {
	UserId string `json:"userId"`
}
type UnBlackUserResp {
}

// account ***************************************************************************************************************************

// 用户名是否存在
type IsUsernameExistReq struct {
	Username string `form:"username" binding:"required"`
}
type IsUsernameExistResp struct {
	Exist bool `json:"exist"`
}

// 注册用户
type RegisterReq struct {
	Username string `json:"username" binding:"required"`
	Password string `json:"password" binding:"required"`
}
type RegisterResp {
	UserModel UserModel `json:"userModel"`
	Token string `json:"token"`
}

// 登录
type LoginReq struct {
	Username string `json:"username" binding:"required"`
	Password string `json:"password" binding:"required"`
}
type LoginResp {
	UserModel UserModel `json:"userModel"`
	Token string `json:"token"`
}


@server(
	group: imuser
	middleware: JwtAuth
	prefix: /v1
)
service imuser {
	// *** account *** //
	@doc(
		summary: "用户名是否存在"
	)
	@handler isUsernameExist
	get /white/account/exist (IsUsernameExistReq) returns (IsUsernameExistResp)
	
	@doc(
		summary: "注册"
	)
	@handler register
	post /white/account/register (RegisterReq) returns (RegisterResp)
	
	@doc(
		summary: "登录"
	)
	@handler login
	post /white/account/login (LoginReq) returns (LoginResp)
	
	// *** user *** //
	@doc(
		summary: "获取自己的用户信息"
	)
	@handler GetSelfInfo
	get /user/selfinfo (GetSelfInfoReq) returns (GetSelfInfoResp)
	
	@doc(
		summary: "使用用户名获取用户信息"
	)
	@handler GetUserByUsername
	get /user/getinfobyusername (GetUserByUsernameReq) returns (GetUserByUsernameResp)
	
	@doc(
		summary: "修改用户信息"
	)
	@handler UpdateSelfInfo
	put /user/selfinfo (ModifySelfInfoReq) returns (ModifySelfInfoResp)
	
	// *** relation *** //
	@doc(
		summary: "申请加好友"
	)
	@handler ApplyFriend
	post /relation/friend/apply (ApplyFriendReq) returns (ApplyFriendResp)
	
	@doc(
		summary: "同意加好友"
	)
	@handler AgreeFriend
	post /relation/friend/agree (AgreeFriendReq) returns (AgreeFriendResp)
	
	@doc(
		summary: "拒绝加好友"
	)
	@handler RefuseFriend
	post /relation/friend/refuse (RefuseFriendReq) returns (RefuseFriendResp)
	
	@doc(
		summary: "获取好友列表"
	)
	@handler GetFriendList
	get /relation/friend/list (GetFriendListReq) returns (GetFriendListResp)
	
	@doc(
		summary: "获取好友请求列表"
	)
	@handler GetFriendApplyList
	get /relation/friend/apply/list (GetFriendApplyListReq) returns (GetFriendApplyListResp)
	
	@doc(
		summary: "删除好友"
	)
	@handler DeleteFriend
	post /relation/friend/delete (DeleteFriendReq) returns (DeleteFriendResp)
	
	@doc(
		summary: "拉黑用户"
	)
	@handler BlackUser
	post /relation/black/add (BlackUserReq) returns (BlackUserResp)
	
	@doc(
		summary: "解除拉黑用户"
	)
	@handler UnBlackUser
	post /relation/black/delete (UnBlackUserReq) returns (UnBlackUserResp)
	
	@doc(
		summary: "获取拉黑用户列表"
	)
	@handler GetBlackList
	get /relation/black/list (GetBlackListReq) returns (GetBlackListResp)
	
}